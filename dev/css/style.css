@charset "UTF-8";
/*
 * Table of contents   Содержание
 *
 *  0. Imports
 *  1. General Vars, Mixins, Extends

 *  14.
 *
 */
/*
Move 
/font-awesome/css
/font-awesome/webfonts
to
/fonts/
*/
/*
 * 1. Import url (form DNS)
 * 2. Font-face mixin
 * 3. Adding by Font-face
 *
*/
@font-face {
  font-family: "myfont";
  src: url("fonts/myfont.eot?") format("eot"), url("fonts/myfont.woff2") format("woff2"), url("fonts/myfont.woff") format("woff"), url("fonts/myfont.ttf") format("truetype"), url("fonts/myfont.svg#myfont") format("svg"); }

/*
* Options
* 1. Structure elements 
* 2. Modules display
* 3. Columns
* 4. Auxiliary elements
* 5. Collapse 
* 6. Responsive utilites
* 7. Text utulites
* 8. SCSS utulites
*   8.1 Functions
*   8.1 Mixins
*/
/*
+ Add $columns gap in devices for each device,
in all slectors where using $columns_gap use column gap from devices
in default $devices add global $columns_gap
*/
/* Options: */
@media (min-width: 320px) {
  .container {
    padding-left: 15px;
    padding-right: 15px; }
  .row,
  .row-line,
  .row-flex {
    margin-left: -15px;
    margin-right: -15px; }
  [class*="mv_"] {
    padding-left: 15px;
    padding-right: 15px; }
  [class*="mh_"] {
    padding-left: 15px;
    padding-right: 15px; }
  [class*="tb_"] {
    padding-left: 15px;
    padding-right: 15px; }
  [class*="ds_"] {
    padding-left: 15px;
    padding-right: 15px; }
  [class*="hd_"] {
    padding-left: 15px;
    padding-right: 15px; } }

@media (min-width: 576px) {
  .container {
    padding-left: 15px;
    padding-right: 15px; }
  .row,
  .row-line,
  .row-flex {
    margin-left: -15px;
    margin-right: -15px; }
  [class*="mv_"] {
    padding-left: 15px;
    padding-right: 15px; }
  [class*="mh_"] {
    padding-left: 15px;
    padding-right: 15px; }
  [class*="tb_"] {
    padding-left: 15px;
    padding-right: 15px; }
  [class*="ds_"] {
    padding-left: 15px;
    padding-right: 15px; }
  [class*="hd_"] {
    padding-left: 15px;
    padding-right: 15px; } }

@media (min-width: 768px) {
  .container {
    padding-left: 15px;
    padding-right: 15px; }
  .row,
  .row-line,
  .row-flex {
    margin-left: -15px;
    margin-right: -15px; }
  [class*="mv_"] {
    padding-left: 15px;
    padding-right: 15px; }
  [class*="mh_"] {
    padding-left: 15px;
    padding-right: 15px; }
  [class*="tb_"] {
    padding-left: 15px;
    padding-right: 15px; }
  [class*="ds_"] {
    padding-left: 15px;
    padding-right: 15px; }
  [class*="hd_"] {
    padding-left: 15px;
    padding-right: 15px; } }

@media (min-width: 1024px) {
  .container {
    padding-left: 15px;
    padding-right: 15px; }
  .row,
  .row-line,
  .row-flex {
    margin-left: -15px;
    margin-right: -15px; }
  [class*="mv_"] {
    padding-left: 15px;
    padding-right: 15px; }
  [class*="mh_"] {
    padding-left: 15px;
    padding-right: 15px; }
  [class*="tb_"] {
    padding-left: 15px;
    padding-right: 15px; }
  [class*="ds_"] {
    padding-left: 15px;
    padding-right: 15px; }
  [class*="hd_"] {
    padding-left: 15px;
    padding-right: 15px; } }

@media (min-width: 1440px) {
  .container {
    padding-left: 15px;
    padding-right: 15px; }
  .row,
  .row-line,
  .row-flex {
    margin-left: -15px;
    margin-right: -15px; }
  [class*="mv_"] {
    padding-left: 15px;
    padding-right: 15px; }
  [class*="mh_"] {
    padding-left: 15px;
    padding-right: 15px; }
  [class*="tb_"] {
    padding-left: 15px;
    padding-right: 15px; }
  [class*="ds_"] {
    padding-left: 15px;
    padding-right: 15px; }
  [class*="hd_"] {
    padding-left: 15px;
    padding-right: 15px; } }

/* 1. Structure elements */
.section {
  float: left;
  width: 100%;
  clear: both; }

.container {
  max-width: 1400px;
  margin: 0 auto;
  -webkit-box-sizing: border-box;
          box-sizing: border-box;
  position: relative; }

.container-elastic {
  max-width: none; }

/* 2. Modules display */
/*
Modules have:
    vertical aligment ( .middle, etc.. )
    reverse order ( .row-reverse )
*/
/* Block  model */
.row > div {
  float: left; }

.row.reverse > div,
.row.row-reverse > div {
  float: right; }

/* Inline-block  model */
/* Flex  model */
.row-flex {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -ms-flex-wrap: wrap;
      flex-wrap: wrap; }

.row-flexbox {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex; }

[class*=row-flex].middle {
  -webkit-box-align: center;
      -ms-flex-align: center;
          align-items: center; }

[class*=row-flex].top {
  -webkit-box-align: start;
      -ms-flex-align: start;
          align-items: flex-start; }

[class*=row-flex].bottom {
  -webkit-box-align: end;
      -ms-flex-align: end;
          align-items: flex-end; }

[class*=row-flex].baseline {
  -webkit-box-align: baseline;
      -ms-flex-align: baseline;
          align-items: baseline; }

[class*=row-flex].stretch {
  -webkit-box-align: stretch;
      -ms-flex-align: stretch;
          align-items: stretch; }

.row-flex.row-reverse,
.row-flex.reverse {
  -webkit-box-orient: horizontal;
  -webkit-box-direction: reverse;
      -ms-flex-direction: row-reverse;
          flex-direction: row-reverse; }

/* 3. Columns */
/* 3. Columns v.2 */
[class*="mv_"], [class*="mh_"], [class*="tb_"], [class*="ds_"], [class*="hd_"] {
  -webkit-box-sizing: border-box;
          box-sizing: border-box;
  position: relative;
  min-height: 1px; }

@media (min-width: 320px) {
  .container-mv_ {
    max-width: 300px; }
  .mv_offset_0 {
    margin-left: 0; }
  .mv_1 {
    width: 8.33333%; }
  .mv_offset_1 {
    margin-left: 8.33333%; }
  .mv_2 {
    width: 16.66667%; }
  .mv_offset_2 {
    margin-left: 16.66667%; }
  .mv_3 {
    width: 25%; }
  .mv_offset_3 {
    margin-left: 25%; }
  .mv_4 {
    width: 33.33333%; }
  .mv_offset_4 {
    margin-left: 33.33333%; }
  .mv_5 {
    width: 41.66667%; }
  .mv_offset_5 {
    margin-left: 41.66667%; }
  .mv_6 {
    width: 50%; }
  .mv_offset_6 {
    margin-left: 50%; }
  .mv_7 {
    width: 58.33333%; }
  .mv_offset_7 {
    margin-left: 58.33333%; }
  .mv_8 {
    width: 66.66667%; }
  .mv_offset_8 {
    margin-left: 66.66667%; }
  .mv_9 {
    width: 75%; }
  .mv_offset_9 {
    margin-left: 75%; }
  .mv_10 {
    width: 83.33333%; }
  .mv_offset_10 {
    margin-left: 83.33333%; }
  .mv_11 {
    width: 91.66667%; }
  .mv_offset_11 {
    margin-left: 91.66667%; }
  .mv_12 {
    width: 100%; }
  .mv_offset_12 {
    margin-left: 100%; }
  .mv_order_1 {
    -webkit-box-ordinal-group: 2;
        -ms-flex-order: 1;
            order: 1; }
  .mv_order_2 {
    -webkit-box-ordinal-group: 3;
        -ms-flex-order: 2;
            order: 2; }
  .mv_order_3 {
    -webkit-box-ordinal-group: 4;
        -ms-flex-order: 3;
            order: 3; }
  .mv_order_4 {
    -webkit-box-ordinal-group: 5;
        -ms-flex-order: 4;
            order: 4; }
  .mv_order_5 {
    -webkit-box-ordinal-group: 6;
        -ms-flex-order: 5;
            order: 5; }
  .mv_order_6 {
    -webkit-box-ordinal-group: 7;
        -ms-flex-order: 6;
            order: 6; }
  .mv_order_7 {
    -webkit-box-ordinal-group: 8;
        -ms-flex-order: 7;
            order: 7; }
  .mv_order_8 {
    -webkit-box-ordinal-group: 9;
        -ms-flex-order: 8;
            order: 8; }
  .mv_order_9 {
    -webkit-box-ordinal-group: 10;
        -ms-flex-order: 9;
            order: 9; }
  .mv_order_10 {
    -webkit-box-ordinal-group: 11;
        -ms-flex-order: 10;
            order: 10; }
  .mv_order_11 {
    -webkit-box-ordinal-group: 12;
        -ms-flex-order: 11;
            order: 11; }
  .mv_order_12 {
    -webkit-box-ordinal-group: 13;
        -ms-flex-order: 12;
            order: 12; }
  .row .mv_self_centered {
    float: none;
    margin: 0 auto; }
  .row-flex .mv_self_centered {
    margin: 0 auto; } }

@media (min-width: 576px) {
  .container-mh_ {
    max-width: 540px; }
  .mh_offset_0 {
    margin-left: 0; }
  .mh_1 {
    width: 8.33333%; }
  .mh_offset_1 {
    margin-left: 8.33333%; }
  .mh_2 {
    width: 16.66667%; }
  .mh_offset_2 {
    margin-left: 16.66667%; }
  .mh_3 {
    width: 25%; }
  .mh_offset_3 {
    margin-left: 25%; }
  .mh_4 {
    width: 33.33333%; }
  .mh_offset_4 {
    margin-left: 33.33333%; }
  .mh_5 {
    width: 41.66667%; }
  .mh_offset_5 {
    margin-left: 41.66667%; }
  .mh_6 {
    width: 50%; }
  .mh_offset_6 {
    margin-left: 50%; }
  .mh_7 {
    width: 58.33333%; }
  .mh_offset_7 {
    margin-left: 58.33333%; }
  .mh_8 {
    width: 66.66667%; }
  .mh_offset_8 {
    margin-left: 66.66667%; }
  .mh_9 {
    width: 75%; }
  .mh_offset_9 {
    margin-left: 75%; }
  .mh_10 {
    width: 83.33333%; }
  .mh_offset_10 {
    margin-left: 83.33333%; }
  .mh_11 {
    width: 91.66667%; }
  .mh_offset_11 {
    margin-left: 91.66667%; }
  .mh_12 {
    width: 100%; }
  .mh_offset_12 {
    margin-left: 100%; }
  .mh_order_1 {
    -webkit-box-ordinal-group: 2;
        -ms-flex-order: 1;
            order: 1; }
  .mh_order_2 {
    -webkit-box-ordinal-group: 3;
        -ms-flex-order: 2;
            order: 2; }
  .mh_order_3 {
    -webkit-box-ordinal-group: 4;
        -ms-flex-order: 3;
            order: 3; }
  .mh_order_4 {
    -webkit-box-ordinal-group: 5;
        -ms-flex-order: 4;
            order: 4; }
  .mh_order_5 {
    -webkit-box-ordinal-group: 6;
        -ms-flex-order: 5;
            order: 5; }
  .mh_order_6 {
    -webkit-box-ordinal-group: 7;
        -ms-flex-order: 6;
            order: 6; }
  .mh_order_7 {
    -webkit-box-ordinal-group: 8;
        -ms-flex-order: 7;
            order: 7; }
  .mh_order_8 {
    -webkit-box-ordinal-group: 9;
        -ms-flex-order: 8;
            order: 8; }
  .mh_order_9 {
    -webkit-box-ordinal-group: 10;
        -ms-flex-order: 9;
            order: 9; }
  .mh_order_10 {
    -webkit-box-ordinal-group: 11;
        -ms-flex-order: 10;
            order: 10; }
  .mh_order_11 {
    -webkit-box-ordinal-group: 12;
        -ms-flex-order: 11;
            order: 11; }
  .mh_order_12 {
    -webkit-box-ordinal-group: 13;
        -ms-flex-order: 12;
            order: 12; }
  .row .mh_self_centered {
    float: none;
    margin: 0 auto; }
  .row-flex .mh_self_centered {
    margin: 0 auto; } }

@media (min-width: 768px) {
  .container-tb_ {
    max-width: 750px; }
  .tb_offset_0 {
    margin-left: 0; }
  .tb_1 {
    width: 8.33333%; }
  .tb_offset_1 {
    margin-left: 8.33333%; }
  .tb_2 {
    width: 16.66667%; }
  .tb_offset_2 {
    margin-left: 16.66667%; }
  .tb_3 {
    width: 25%; }
  .tb_offset_3 {
    margin-left: 25%; }
  .tb_4 {
    width: 33.33333%; }
  .tb_offset_4 {
    margin-left: 33.33333%; }
  .tb_5 {
    width: 41.66667%; }
  .tb_offset_5 {
    margin-left: 41.66667%; }
  .tb_6 {
    width: 50%; }
  .tb_offset_6 {
    margin-left: 50%; }
  .tb_7 {
    width: 58.33333%; }
  .tb_offset_7 {
    margin-left: 58.33333%; }
  .tb_8 {
    width: 66.66667%; }
  .tb_offset_8 {
    margin-left: 66.66667%; }
  .tb_9 {
    width: 75%; }
  .tb_offset_9 {
    margin-left: 75%; }
  .tb_10 {
    width: 83.33333%; }
  .tb_offset_10 {
    margin-left: 83.33333%; }
  .tb_11 {
    width: 91.66667%; }
  .tb_offset_11 {
    margin-left: 91.66667%; }
  .tb_12 {
    width: 100%; }
  .tb_offset_12 {
    margin-left: 100%; }
  .tb_order_1 {
    -webkit-box-ordinal-group: 2;
        -ms-flex-order: 1;
            order: 1; }
  .tb_order_2 {
    -webkit-box-ordinal-group: 3;
        -ms-flex-order: 2;
            order: 2; }
  .tb_order_3 {
    -webkit-box-ordinal-group: 4;
        -ms-flex-order: 3;
            order: 3; }
  .tb_order_4 {
    -webkit-box-ordinal-group: 5;
        -ms-flex-order: 4;
            order: 4; }
  .tb_order_5 {
    -webkit-box-ordinal-group: 6;
        -ms-flex-order: 5;
            order: 5; }
  .tb_order_6 {
    -webkit-box-ordinal-group: 7;
        -ms-flex-order: 6;
            order: 6; }
  .tb_order_7 {
    -webkit-box-ordinal-group: 8;
        -ms-flex-order: 7;
            order: 7; }
  .tb_order_8 {
    -webkit-box-ordinal-group: 9;
        -ms-flex-order: 8;
            order: 8; }
  .tb_order_9 {
    -webkit-box-ordinal-group: 10;
        -ms-flex-order: 9;
            order: 9; }
  .tb_order_10 {
    -webkit-box-ordinal-group: 11;
        -ms-flex-order: 10;
            order: 10; }
  .tb_order_11 {
    -webkit-box-ordinal-group: 12;
        -ms-flex-order: 11;
            order: 11; }
  .tb_order_12 {
    -webkit-box-ordinal-group: 13;
        -ms-flex-order: 12;
            order: 12; }
  .row .tb_self_centered {
    float: none;
    margin: 0 auto; }
  .row-flex .tb_self_centered {
    margin: 0 auto; } }

@media (min-width: 1024px) {
  .container-ds_ {
    max-width: 960px; }
  .ds_offset_0 {
    margin-left: 0; }
  .ds_1 {
    width: 8.33333%; }
  .ds_offset_1 {
    margin-left: 8.33333%; }
  .ds_2 {
    width: 16.66667%; }
  .ds_offset_2 {
    margin-left: 16.66667%; }
  .ds_3 {
    width: 25%; }
  .ds_offset_3 {
    margin-left: 25%; }
  .ds_4 {
    width: 33.33333%; }
  .ds_offset_4 {
    margin-left: 33.33333%; }
  .ds_5 {
    width: 41.66667%; }
  .ds_offset_5 {
    margin-left: 41.66667%; }
  .ds_6 {
    width: 50%; }
  .ds_offset_6 {
    margin-left: 50%; }
  .ds_7 {
    width: 58.33333%; }
  .ds_offset_7 {
    margin-left: 58.33333%; }
  .ds_8 {
    width: 66.66667%; }
  .ds_offset_8 {
    margin-left: 66.66667%; }
  .ds_9 {
    width: 75%; }
  .ds_offset_9 {
    margin-left: 75%; }
  .ds_10 {
    width: 83.33333%; }
  .ds_offset_10 {
    margin-left: 83.33333%; }
  .ds_11 {
    width: 91.66667%; }
  .ds_offset_11 {
    margin-left: 91.66667%; }
  .ds_12 {
    width: 100%; }
  .ds_offset_12 {
    margin-left: 100%; }
  .ds_order_1 {
    -webkit-box-ordinal-group: 2;
        -ms-flex-order: 1;
            order: 1; }
  .ds_order_2 {
    -webkit-box-ordinal-group: 3;
        -ms-flex-order: 2;
            order: 2; }
  .ds_order_3 {
    -webkit-box-ordinal-group: 4;
        -ms-flex-order: 3;
            order: 3; }
  .ds_order_4 {
    -webkit-box-ordinal-group: 5;
        -ms-flex-order: 4;
            order: 4; }
  .ds_order_5 {
    -webkit-box-ordinal-group: 6;
        -ms-flex-order: 5;
            order: 5; }
  .ds_order_6 {
    -webkit-box-ordinal-group: 7;
        -ms-flex-order: 6;
            order: 6; }
  .ds_order_7 {
    -webkit-box-ordinal-group: 8;
        -ms-flex-order: 7;
            order: 7; }
  .ds_order_8 {
    -webkit-box-ordinal-group: 9;
        -ms-flex-order: 8;
            order: 8; }
  .ds_order_9 {
    -webkit-box-ordinal-group: 10;
        -ms-flex-order: 9;
            order: 9; }
  .ds_order_10 {
    -webkit-box-ordinal-group: 11;
        -ms-flex-order: 10;
            order: 10; }
  .ds_order_11 {
    -webkit-box-ordinal-group: 12;
        -ms-flex-order: 11;
            order: 11; }
  .ds_order_12 {
    -webkit-box-ordinal-group: 13;
        -ms-flex-order: 12;
            order: 12; }
  .row .ds_self_centered {
    float: none;
    margin: 0 auto; }
  .row-flex .ds_self_centered {
    margin: 0 auto; } }

@media (min-width: 1440px) {
  .container-hd_ {
    max-width: 1400px; }
  .hd_offset_0 {
    margin-left: 0; }
  .hd_1 {
    width: 8.33333%; }
  .hd_offset_1 {
    margin-left: 8.33333%; }
  .hd_2 {
    width: 16.66667%; }
  .hd_offset_2 {
    margin-left: 16.66667%; }
  .hd_3 {
    width: 25%; }
  .hd_offset_3 {
    margin-left: 25%; }
  .hd_4 {
    width: 33.33333%; }
  .hd_offset_4 {
    margin-left: 33.33333%; }
  .hd_5 {
    width: 41.66667%; }
  .hd_offset_5 {
    margin-left: 41.66667%; }
  .hd_6 {
    width: 50%; }
  .hd_offset_6 {
    margin-left: 50%; }
  .hd_7 {
    width: 58.33333%; }
  .hd_offset_7 {
    margin-left: 58.33333%; }
  .hd_8 {
    width: 66.66667%; }
  .hd_offset_8 {
    margin-left: 66.66667%; }
  .hd_9 {
    width: 75%; }
  .hd_offset_9 {
    margin-left: 75%; }
  .hd_10 {
    width: 83.33333%; }
  .hd_offset_10 {
    margin-left: 83.33333%; }
  .hd_11 {
    width: 91.66667%; }
  .hd_offset_11 {
    margin-left: 91.66667%; }
  .hd_12 {
    width: 100%; }
  .hd_offset_12 {
    margin-left: 100%; }
  .hd_order_1 {
    -webkit-box-ordinal-group: 2;
        -ms-flex-order: 1;
            order: 1; }
  .hd_order_2 {
    -webkit-box-ordinal-group: 3;
        -ms-flex-order: 2;
            order: 2; }
  .hd_order_3 {
    -webkit-box-ordinal-group: 4;
        -ms-flex-order: 3;
            order: 3; }
  .hd_order_4 {
    -webkit-box-ordinal-group: 5;
        -ms-flex-order: 4;
            order: 4; }
  .hd_order_5 {
    -webkit-box-ordinal-group: 6;
        -ms-flex-order: 5;
            order: 5; }
  .hd_order_6 {
    -webkit-box-ordinal-group: 7;
        -ms-flex-order: 6;
            order: 6; }
  .hd_order_7 {
    -webkit-box-ordinal-group: 8;
        -ms-flex-order: 7;
            order: 7; }
  .hd_order_8 {
    -webkit-box-ordinal-group: 9;
        -ms-flex-order: 8;
            order: 8; }
  .hd_order_9 {
    -webkit-box-ordinal-group: 10;
        -ms-flex-order: 9;
            order: 9; }
  .hd_order_10 {
    -webkit-box-ordinal-group: 11;
        -ms-flex-order: 10;
            order: 10; }
  .hd_order_11 {
    -webkit-box-ordinal-group: 12;
        -ms-flex-order: 11;
            order: 11; }
  .hd_order_12 {
    -webkit-box-ordinal-group: 13;
        -ms-flex-order: 12;
            order: 12; }
  .row .hd_self_centered {
    float: none;
    margin: 0 auto; }
  .row-flex .hd_self_centered {
    margin: 0 auto; } }

/* 4. Auxiliary elements (Вспомогательные структурные элементы) */
.container:before,
.container:after,
.row:before,
.row:after {
  display: table;
  content: " ";
  -webkit-box-sizing: border-box;
          box-sizing: border-box; }

.container:after,
.row:after {
  clear: both; }

/* 5. Collapse */
.collapse > [class*=row] > [class*="mv_"], .collapse > [class*=row] > [class*="mh_"], .collapse > [class*=row] > [class*="tb_"], .collapse > [class*=row] > [class*="ds_"], .collapse > [class*=row] > [class*="hd_"], [class*=row].collapse [class*="mv_"], [class*=row].collapse [class*="mh_"], [class*=row].collapse [class*="tb_"], [class*=row].collapse [class*="ds_"], [class*=row].collapse [class*="hd_"], [class*=row].collapse-this > [class*="mv_"], [class*=row].collapse-this > [class*="mh_"], [class*=row].collapse-this > [class*="tb_"], [class*=row].collapse-this > [class*="ds_"], [class*=row].collapse-this > [class*="hd_"] {
  padding-left: 0;
  padding-right: 0; }

.collapse {
  padding-left: 0;
  padding-right: 0; }
  .collapse > [class*=row] {
    margin-left: 0;
    margin-right: 0; }

[class*=row].collapse {
  margin-left: 0;
  margin-right: 0; }
  [class*=row].collapse [class*=row] {
    margin-left: 0;
    margin-right: 0; }

[class*=row].collapse-this {
  margin-left: 0;
  margin-right: 0; }

/* 6. Responsive utilites (Утилиты адаптации)  */
/* Hide on large, show on small (Скрываем на больших, на малых показываем) */
@media (min-width: 320px) {
  body .mv_hidden {
    display: none; } }

@media (max-width: 319px) {
  body .mv_visible {
    display: none; } }

@media (min-width: 576px) {
  body .mh_hidden {
    display: none; } }

@media (max-width: 575px) {
  body .mh_visible {
    display: none; } }

@media (min-width: 768px) {
  body .tb_hidden {
    display: none; } }

@media (max-width: 767px) {
  body .tb_visible {
    display: none; } }

@media (min-width: 1024px) {
  body .ds_hidden {
    display: none; } }

@media (max-width: 1023px) {
  body .ds_visible {
    display: none; } }

@media (min-width: 1440px) {
  body .hd_hidden {
    display: none; } }

@media (max-width: 1439px) {
  body .hd_visible {
    display: none; } }

/* 7. Text utulites  */
.lefted {
  text-align: left; }

.righted {
  text-align: right; }

.centered {
  text-align: center; }

.justifyed {
  text-align: justify; }

@media (min-width: 320px) {
  .mv_lefted {
    text-align: left; }
  .mv_righted {
    text-align: right; }
  .mv_centered {
    text-align: center; }
  .mv_justifyed {
    text-align: justify; } }

@media (min-width: 576px) {
  .mh_lefted {
    text-align: left; }
  .mh_righted {
    text-align: right; }
  .mh_centered {
    text-align: center; }
  .mh_justifyed {
    text-align: justify; } }

@media (min-width: 768px) {
  .tb_lefted {
    text-align: left; }
  .tb_righted {
    text-align: right; }
  .tb_centered {
    text-align: center; }
  .tb_justifyed {
    text-align: justify; } }

@media (min-width: 1024px) {
  .ds_lefted {
    text-align: left; }
  .ds_righted {
    text-align: right; }
  .ds_centered {
    text-align: center; }
  .ds_justifyed {
    text-align: justify; } }

@media (min-width: 1440px) {
  .hd_lefted {
    text-align: left; }
  .hd_righted {
    text-align: right; }
  .hd_centered {
    text-align: center; }
  .hd_justifyed {
    text-align: justify; } }

/* 8. SCSS Utulites  */
/* 8.1 Functions  */
/*
* 
* 1. get_grid_bp() - return breakpoint value from $devices
* 2. get_grid_c_m() - return container_max value from $devices
* 3. get_grid_f_b() - return font_base value from $devices
* 4. get_grid_ms_c() - return ms_coeff value from $devices
*
*/
/* 1.  get_grid_c_m($bp_name) - return breakpoint value from $devices */
/* 2. get_grid_c_m($bp_name) - return container_max value from $devices */
/* 3. get_grid_f_b($bp_name) - return font_base value from $devices */
/* 4. get_grid_ms_c($bp_name) - return ms_coeff value from $devices */
/* 5. get_grid_property($bp_name, $propery) - return specified property value $devies */
/* 8.2 Mixins  */
/*
* 
* 1. media-up()   - output @media expression (min-width)
* 2. media-down() - output @media expression (max-width)
* 3. media-only() - output @media expression (min-width) and (max-width)
*
*/
/* 1.  media-up($bp_name) - output @media expression up from breakpoint (min-width) */
/* 2.  media-down($bp_name) - output @media expression down from breakpoint (max-width) */
/* 3.  media-only($bp_name) - output @media expression up from breakpoint to the next breakpoint  (min-width) and (max-width) */
/* 9 Beta test*/
/*
* 
* 1. get_grid_bp() - return breakpoint value from $devices
* 2. get_grid_c_m() - return container_max value from $devices
* 3. get_grid_f_b() - return font_base value from $devices
* 4. get_grid_ms_c() - return ms_coeff value from $devices
*
*/
/* 1.  get_grid_c_m($bp_name) - return breakpoint value from $devices */
/* 2. get_grid_c_m($bp_name) - return container_max value from $devices */
/* 3. get_grid_f_b($bp_name) - return font_base value from $devices */
/* 4. get_grid_ms_c($bp_name) - return ms_coeff value from $devices */
/* 5. get_grid_property($bp_name, $propery) - return specified property value $devies */
/*
+ В ряду .row одна ячейка
+ В ряду .row-flex одна ячейка

+ В ряду .row несколько ячеек - становится по центру, другние сталкивает на след-ю строку
+ В ряду .row-flex несколько ячеек - 
сначала вычисляется свободное пространство после заполнения другими  элементами контейнера,
после этого рассчитываются расположение с авто отступами margin, расталкивая другие элементы
*/
/*
 * 1. Colors
 * 2. Fonts
 * 3. Borders
 * 4. Z-index
 * 5. Animations
 * 
 * 
 * 
*/
/*
 * cut_corners()
 */
/*

Взять первый аргумент массив
Разложить деструктивно
Если направление direction
    1
    2
    3
    4


 */
/*
DOCSS - Design-orientired CSS
 
Make your code like design with design terms like:
    Color scheme
    Typographic scheme
    Vertical rhytm
    Horizontal rhytm
    Height leveling
*/
/*
 * 1. pseudoelement_left_top()
 * 2. pseudoelement_right_top()
 * 3. flex()
 * 4. width()
 * 5. height()
 * 6. image_center_cover
 * 7. image_center_contain
 * 8. text_overflow
 * 9. bg_clip_text
 * 10. text_vertical()
 * 11. set_bg_adaptive
 * 0.
 */
/*
 * Display 'flex' - set justify and aligment,
 * add set optionaly flex-direction and flex-wrap 
 * Call: // flex(space-between, center);
*/
/*
 * Set width properties - set width, min-width and max-width
 * Call: // width(auto, 200px, 100%);
*/
/*
 * Set height properties - set height, min-height adn max-height
 * Call: // height(auto, 200px, 100%);
*/
/*
 * Centered image in container like CSS cover
 * Call: // image_center_cover();
*/
/*
 * Centered image in container like CSS contain
 * Call: // image_center_contain();
*/
/*
 * Overflow text in element
 * Call: // text_overflow();
*/
/*
 * Set background clip text
 * Call: // bg_clip_text();
*/
/*
 * Set text wrigthing mode vertical, and align text
 * Call: // text_vertical(center, '', ttb);
*/
/*
 * Set adaptive bg-image
 * Call: // set_bg_adaptive('../images/section-main-bg', (768, 1200), 'jpg');
*/
/*

Obj $devices 
->
Obj $font_size_names
->
function set_font_sizes()
->
mixin font_size_pro()

*/
@media (min-width: 320px) {
  .my_head {
    font-size: 17px; } }

@media (min-width: 768px) {
  .my_head {
    font-size: 18px; } }

/*
 * Extends
*/
/*
 * .Base
 *
*/
/*
 * Base
*/
html {
  font-size: 14px;
  height: 100%; }

body {
  font-size: inherit;
  font-family: "Roboto", Verdana, Arial, sans-serif;
  height: 100%;
  margin: 0;
  font-weight: 300; }

* {
  -webkit-box-sizing: border-box;
          box-sizing: border-box; }

a {
  text-decoration: none; }

ul, ol {
  margin: 0;
  padding: 0;
  list-style: none; }

h1, h2, h3, h4,
.h1, .h2, .h3, .h4 {
  margin: 0;
  line-height: 1.2em;
  font-family: "Roboto", Tahoma, Arial, sans-serif;
  font-weight: 400;
  color: #353437; }

h1, .h1 {
  font-size: 2.00534rem;
  letter-spacing: 0.05em; }

h2, .h2 {
  font-size: 1.68516rem; }

h3, .h3 {
  font-size: 1.4161rem; }

h4, .h4 {
  font-size: 1.19rem; }

p {
  margin-top: 0;
  margin-bottom: 1em;
  font-size: 1rem;
  line-height: 1.5em;
  font-weight: 300; }

img {
  display: block;
  max-width: 100%;
  width: 100%;
  height: auto; }

code {
  background-color: rgba(0, 0, 0, 0.1); }

.themify:before,
.themify:after {
  vertical-align: middle;
  display: block; }

.section-component {
  margin: 3em 0; }

/*
 
*/
/* B. Plugins
 * **********************************************************************
 *  
*/
/* . news
 * **********************************************************************
 *
*/
/*
 * Blocks vars
 * Block and elements styles
 * Other styles (Not block elems, but associated with it)
 * Media rules - Mobile First, use min-width
 * States
 */
.news__item {
  width: 100%;
  position: relative;
  background-color: #2491dd;
  padding: 1em; }
  .news__item-outer:nth-child(2) .news__item:before {
    right: -30px;
    top: -30px;
    position: absolute;
    content: "";
    border: 30px solid #d6d5d7;
    -webkit-transform: rotate(45deg);
        -ms-transform: rotate(45deg);
            transform: rotate(45deg); }
  .news__item-outer:nth-child(2) .news__item:after {
    right: -20px;
    bottom: -20px;
    position: absolute;
    content: "";
    border: 20px solid #d6d5d7;
    -webkit-transform: rotate(45deg);
        -ms-transform: rotate(45deg);
            transform: rotate(45deg); }
  .news__item-date {
    color: green; }

/* 1. General, structure
 * **********************************************************************
 *  
*/
.main--sidebar--left {
  float: right; }

.main--sidebar--right {
  float: left; }

.main--sidebar--right + .sidebar {
  float: right; }

/* 2. Header
 * **********************************************************************
 *  
*/
.logo img {
  width: auto;
  max-width: 100%;
  height: auto; }

/* media end */
header {
  width: 100%;
  padding: 1rem  0;
  background-color: #fff;
  background-color: #3c9; }

/* 3. Footer
 * **********************************************************************
 *  
*/
.news .news__item:after {
  /* 
вычислить кол-во шагов
пройтись циклом, добавить в массив значения      
каждый шаг
    добавлять в массив 4 точки
    у каждой точки есть 2 координаты
    каждая координата имеет коэфф-т - см. логику в css

*/
  width: 100px;
  height: 4px;
  -webkit-clip-path: polygon(0px 0, 8px 0, 8px 4px, 18px 4px, 18px 0, 26px 0, 26px 4px, 36px 4px, 36px 0, 44px 0, 44px 4px, 54px 4px, 54px 0, 62px 0, 62px 4px, 72px 4px, 72px 0, 80px 0, 80px 4px, 90px 4px, 90px 0, 98px 0, 98px 4px, 108px 4px, 108px 0, 116px 0, 116px 4px, 126px 4px, 0 4px);
          clip-path: polygon(0px 0, 8px 0, 8px 4px, 18px 4px, 18px 0, 26px 0, 26px 4px, 36px 4px, 36px 0, 44px 0, 44px 4px, 54px 4px, 54px 0, 62px 0, 62px 4px, 72px 4px, 72px 0, 80px 0, 80px 4px, 90px 4px, 90px 0, 98px 0, 98px 4px, 108px 4px, 108px 0, 116px 0, 116px 4px, 126px 4px, 0 4px);
  content: "";
  position: absolute;
  left: 100%;
  top: 50%;
  -webkit-transform: translate(-50%, -50%);
      -ms-transform: translate(-50%, -50%);
          transform: translate(-50%, -50%);
  background-color: #9b999e;
  opacity: 0.5; }

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
